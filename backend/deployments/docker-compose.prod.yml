version: "3.3"

networks:
  postgres-network:
    driver: bridge
  minio-network:
    driver: bridge
  redis-network:
    driver: bridge
  kafka-network:
    driver: bridge

services:
  redis:
    image: bitnami/redis:8.2
    container_name: redis
    restart: unless-stopped
    env_file: .env
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_PORT_NUMBER: ${REDIS_PORT_NUMBER}
    networks:
      - redis-network
    volumes:
      - redis-data:/bitnami/redis/data

  minio:
    image: bitnami/minio:2025
    container_name: minio
    restart: unless-stopped
    env_file: .env
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_BROWSER: ${MINIO_BROWSER}
      MINIO_CONSOLE_PORT_NUMBER: ${MINIO_CONSOLE_PORT_NUMBER}
      MINIO_API_PORT_NUMBER: ${MINIO_API_PORT_NUMBER}
    ports:
      - "${MINIO_API_PORT_NUMBER}:${MINIO_API_PORT_NUMBER}"
      - "${MINIO_CONSOLE_PORT_NUMBER}:${MINIO_CONSOLE_PORT_NUMBER}"
    networks:
      - minio-network
    volumes:
      - minio-data:/bitnami/minio/data

  postgresql:
    image: postgres:16-alpine
    container_name: postgresql
    restart: unless-stopped
    env_file: .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    networks:
      - postgres-network
    volumes:
      - postgresql-data:/var/lib/postgresql/data

  kafka:
    image: bitnami/kafka:4.0
    container_name: kafka
    restart: unless-stopped
    env_file: .env
    environment:
      KAFKA_CFG_NODE_ID: 0
      KAFKA_CFG_PROCESS_ROLES: ${KAFKA_CFG_PROCESS_ROLES}
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: ${KAFKA_CFG_CONTROLLER_QUORUM_VOTERS}
      KAFKA_CLUSTER_ID: ${KAFKA_CLUSTER_ID}
      KAFKA_CFG_LISTENERS: ${KAFKA_CFG_LISTENERS}
      KAFKA_CFG_ADVERTISED_LISTENERS: ${KAFKA_CFG_ADVERTISED_LISTENERS}
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: ${KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP}
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: ${KAFKA_CFG_CONTROLLER_LISTENER_NAMES}
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: ${KAFKA_CFG_INTER_BROKER_LISTENER_NAME}
      KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR: ${KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR}
      KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: ${KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR}
      KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR: ${KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR}
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: ${KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE}
      # KAFKA_INTER_BROKER_USER: ${KAFKA_INTER_BROKER_USER}
      # KAFKA_INTER_BROKER_PASSWORD: ${KAFKA_INTER_BROKER_PASSWORD}
      # KAFKA_CONTROLLER_USER: ${KAFKA_CONTROLLER_USER}
      # KAFKA_CONTROLLER_PASSWORD: ${KAFKA_CONTROLLER_PASSWORD}
    networks:
      - kafka-network
    volumes:
      - kafka-data:/bitnami/kafka

  server:
    build:
      context: ./../
      dockerfile: ./build/package/Dockerfile
    container_name: ${SERVER_NAME}
    restart: unless-stopped
    env_file: .env
    ports:
      - "${SERVER_PORT}:${SERVER_PORT}"
    networks:
      - postgres-network
      - minio-network
      - redis-network
      - kafka-network
    depends_on:
      - postgresql
      - minio
      - redis
      - kafka

volumes:
  postgresql-data:
  minio-data:
  redis-data:
  kafka-data:
